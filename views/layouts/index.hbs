<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
    <link rel="stylesheet" href="/static/styles.css">
    <title>Document</title>
    <script src="/socket.io/socket.io.js"></script>
</head>
<body>
    {{{body}}}
    <script>
        const socket = io();
        const form = document.getElementById("formulario");
        const chatForm = document.getElementById("chat-form");

        form.addEventListener("submit", e => {
            e.preventDefault();
            const ev = e.target;
            if(!ev.title.value.length || !ev.price.value.length) return alert("Complete todos los datos");
            const newProduct = {
                title:ev.title.value,
                price:ev.price.value,
            }
            socket.emit("agregar producto", newProduct)
            
        })

       
        socket.on("producto agregado", data => {
            const tbody = document.getElementById("tbody");
            const html = data.reduce((ac, item)=>{
                const row = `
                    <tr>
                        <th>${item.id}</th>
                        <th>${item.title}</th>
                        <th>$ ${item.price}</th>
                    </tr>
                `;
                return ac + row;
            },"")
            tbody.innerHTML = html;
        })


        chatForm.addEventListener("submit", e => {
            e.preventDefault();
            const ev = e.target;
            if(!ev.email.value.length || !ev.text.value.length) return alert("Complete los datos");
            const data = new Date();
            
            const newMessage = {
                email:ev.email.value,
                date:data.toLocaleString(),
                text:ev.text.value
            }
            socket.emit("enviar mensaje", newMessage)
            
        })

        socket.on("nuevo mensaje", chatData => {
            const messagesContainer = document.querySelector(".chat-messages-container");
            const html = chatData.reduce((ac, item) =>{
                const htmlStr = `
                    <div>
                        <h5>${item.email}</h5>
                        <h5>[${item.date}]</h5>
                        <h5>${item.text}</h5>
                    </div>
                `;
                return ac + htmlStr;
            },"")
            messagesContainer.innerHTML = html;
        })

    </script>
</body>
</html>